import 'dart:math';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:audioplayers/audioplayers.dart';
import '../models/message.dart';
import '../services/api_service.dart';

import '../widgets/typing_text.dart';

class ChatScreen extends StatefulWidget {
  @override
  _ChatScreenState createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen>
    with TickerProviderStateMixin {
  final TextEditingController _textController = TextEditingController();
  final ApiService _apiService = ApiService();
  final AudioPlayer _audioPlayer = AudioPlayer();
  
  List<Message> _messages = [];
  bool _isTyping = false;
  bool _isPlayingVoice = false;
  bool _isAutoMode = false;
  bool _showBacklog = false;
  bool _showSettings = false;
  bool _showInputArea = false;
  
  late AnimationController _characterAnimationController;
  late AnimationController _dialogAnimationController;
  late AnimationController _nextIndicatorController;

  late Animation<double> _characterAnimation;
  late Animation<double> _dialogAnimation;
  late Animation<double> _nextIndicatorAnimation;

  // Theme colors
  static const Color primaryColor = Color(0xFFFF6EA8);
  static const Color secondaryColor = Color(0xFF5AC8FA);
  static const Color backgroundColor = Color(0xFF1A1A1A);
  static const Color dialogBoxColor = Color(0xE1FFFFFF); // 88% opacity white

  final List<String> _initialGreetings = [
    "おはよう...今日も来たんだ。別に嬉しくないけど。",
    "ふーん、また来たんだ。何か用？",
    "別に待ってたわけじゃないけど...。で、要件は？",
    "時間通りだね。まあ、褒めてはあげないけど。",
  ];

  @override
  void initState() {
    super.initState();
    
    _characterAnimationController = AnimationController(
      duration: const Duration(milliseconds: 1600),
      vsync: this,
    );
    
    _dialogAnimationController = AnimationController(
      duration: const Duration(milliseconds: 160),
      vsync: this,
    );
    
    _nextIndicatorController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );
    
    _characterAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _characterAnimationController,
      curve: Curves.easeOutCubic,
    ));

    _dialogAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _dialogAnimationController,
      curve: Curves.easeOut,
    ));

    _nextIndicatorAnimation = Tween<double>(
      begin: 0.8,
      end: 1.2,
    ).animate(CurvedAnimation(
      parent: _nextIndicatorController,
      curve: Curves.easeInOut,
    ));

    _characterAnimationController.forward();
    _dialogAnimationController.forward();
    _nextIndicatorController.repeat(reverse: true);
    
    _setupAudioPlayerListeners();
    
    _showInitialGreeting();
  }

  void _showInitialGreeting() async {
    final random = Random();
    final greeting = _initialGreetings[random.nextInt(_initialGreetings.length)];
    final messageId = DateTime.now().millisecondsSinceEpoch.toString();

    final initialMessage = Message(
      id: messageId,
      text: greeting,
      speaker: "涼宮ハルヒ",
      timestamp: DateTime.now(),
      isUser: false,
      audioPath: null,
    );
    _addMessage(initialMessage);

    try {
      final String? audioPath = await _apiService.synthesizeVoice(greeting);
      if (audioPath != null && mounted) {
        setState(() {
          final messageIndex = _messages.indexWhere((m) => m.id == messageId);
          if (messageIndex != -1) {
            _messages[messageIndex] = _messages[messageIndex].copyWith(audioPath: audioPath);
          }
        });
        Future.delayed(const Duration(milliseconds: 500), () {
          if (mounted) {
            _playVoice(audioPath);
          }
        });
      }
    } catch (e) {
      print("Error synthesizing initial greeting: $e");
    }
  }

  void _setupAudioPlayerListeners() {
    _audioPlayer.onPlayerStateChanged.listen((state) {
      if (mounted) {
        setState(() {
          _isPlayingVoice = state == PlayerState.playing;
        });
      }
    });

    _audioPlayer.onPlayerComplete.listen((_) {
      if (mounted) {
        setState(() {
          _isPlayingVoice = false;
        });
      }
    });
  }

  @override
  void dispose() {
    _characterAnimationController.dispose();
    _dialogAnimationController.dispose();
    _nextIndicatorController.dispose();
    _audioPlayer.dispose();
    super.dispose();
  }

  void _addMessage(Message message) {
    setState(() {
      _messages.add(message);
    });
    _dialogAnimationController.reset();
    _dialogAnimationController.forward();
  }

  // MODIFIED: New _sendMessage logic
  Future<void> _sendMessage() async {
    if (_textController.text.trim().isEmpty) return;

    final userMessage = Message(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      text: _textController.text,
      speaker: "あなた",
      timestamp: DateTime.now(),
      isUser: true,
    );

    _addMessage(userMessage);
    _textController.clear();
    setState(() => _showInputArea = false);

    setState(() {
      _isTyping = true;
    });

    try {
      // Step 1: Get the text response from the backend
      final response = await _apiService.sendMessage(userMessage.text);
      final aiText = response['response'];
      final messageId = DateTime.now().millisecondsSinceEpoch.toString();

      // Step 2: Immediately add the text message to the UI
      final aiMessage = Message(
        id: messageId,
        text: aiText,
        speaker: "涼宮ハルヒ",
        timestamp: DateTime.now(),
        isUser: false,
        audioPath: null, // Audio path is not available yet
      );
      
      setState(() {
        _isTyping = false;
      });
      _addMessage(aiMessage);

      // Step 3: In the background, synthesize the voice
      final String? newAudioPath = await _apiService.synthesizeVoice(aiText);

      // Step 4: If audio was synthesized, update the message and play it
      if (newAudioPath != null) {
        if (!mounted) return;
        
        // Find the message we just added and update its audio path
        setState(() {
          final messageIndex = _messages.indexWhere((m) => m.id == messageId);
          if (messageIndex != -1) {
            _messages[messageIndex] = _messages[messageIndex].copyWith(audioPath: newAudioPath);
          }
        });

        // Play the voice
        _playVoice(newAudioPath);
      }

    } catch (e) {
      if (!mounted) return;
      setState(() {
        _isTyping = false;
      });
      _addMessage(Message(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        text: "...何か問題があるみたい。",
        speaker: "涼宮ハルヒ",
        timestamp: DateTime.now(),
        isUser: false,
      ));
    }
  }

  Future<void> _playVoice(String path) async {
    if (!mounted) return;
    try {
      if (_isPlayingVoice) {
        await _audioPlayer.stop();
      }
      setState(() {
        _isPlayingVoice = true;
      });
      
      // The path from the API is now a full URL, so we can use it directly.
      await _audioPlayer.play(UrlSource(path));
    } catch (e) {
      if(mounted) setState(() => _isPlayingVoice = false);
      _showErrorSnackBar('音声再生エラー: ${e.toString()}');
    }
  }

  void _showErrorSnackBar(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: Colors.red[600],
          duration: Duration(seconds: 3),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final Message? currentMessage = _messages.isNotEmpty ? _messages.last : null;

    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          image: DecorationImage(
            image: AssetImage('assets/images/classroom.jpg'),
            fit: BoxFit.cover,
          ),
        ),
        child: Stack(
          children: [
            Positioned.fill(
              child: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topCenter,
                    end: Alignment.bottomCenter,
                    colors: [Colors.black.withOpacity(0.35), Colors.transparent],
                    stops: [0.0, 0.3],
                  ),
                ),
              ),
            ),
            
            Positioned(
              bottom: 0,
              left: 0,
              right: 0,
              child: Align(
                alignment: Alignment.bottomCenter,
                child: AnimatedBuilder(
                  animation: _characterAnimation,
                  builder: (context, child) {
                    return Opacity(
                      opacity: _characterAnimation.value,
                      child: Container(
                        height: MediaQuery.of(context).size.height * 0.65,
                        child: Container(
                          decoration: BoxDecoration(
                            boxShadow: [
                              BoxShadow(
                                color: Colors.black.withOpacity(0.25),
                                blurRadius: 30,
                                offset: Offset(0, 10),
                              ),
                            ],
                          ),
                          child: Image.asset(
                            'assets/images/char.png',
                            fit: BoxFit.contain,
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ),
            ),
            
            Positioned(
              top: MediaQuery.of(context).padding.top + 20,
              left: 24,
              right: 24,
              child: _buildTitleBar(),
            ),
            
            if (_showInputArea)
              _buildStylizedInputArea()
            else if (currentMessage != null)
              _buildDialogueArea(currentMessage),

            if (_showBacklog) _buildBacklogOverlay(),
            if (_showSettings) _buildSettingsOverlay(),
          ],
        ),
      ),
    );
  }

  Widget _buildDialogueArea(Message currentMessage) {
    return Positioned(
      bottom: MediaQuery.of(context).padding.bottom + 16,
      left: 24,
      right: 24,
      child: GestureDetector(
        onTap: () {
          if (!currentMessage.isUser) {
            setState(() => _showInputArea = true);
          }
        },
        child: Stack(
          clipBehavior: Clip.none,
          children: [
            AnimatedBuilder(
              animation: _dialogAnimation,
              builder: (context, child) {
                return Transform.translate(
                  offset: Offset(0, 20 * (1 - _dialogAnimation.value)),
                  child: Opacity(
                    opacity: _dialogAnimation.value,
                    child: _buildDialogBoxContents(currentMessage),
                  ),
                );
              },
            ),
            Positioned(
              top: -20,
              left: 20,
              child: _buildNameplate(currentMessage),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildNameplate(Message message) {
    final color = message.isUser ? secondaryColor : primaryColor;
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      decoration: BoxDecoration(
        color: color,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [BoxShadow(color: Colors.black.withOpacity(0.2), blurRadius: 4, offset: Offset(0, 2))]
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(
            message.speaker,
            style: TextStyle(
              color: Colors.white,
              fontSize: 15,
              fontWeight: FontWeight.w900,
              fontFamily: 'NotoSansJP',
              letterSpacing: 0.5,
            ),
          ),
          SizedBox(width: 4),
          Transform.rotate(
            angle: 3.14159 / 4,
            child: Container(width: 6, height: 6, color: color.withOpacity(0.5)),
          ),
        ],
      ),
    );
  }

  Widget _buildDialogBoxContents(Message message) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(28),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 14, sigmaY: 14),
        child: Container(
          decoration: BoxDecoration(
            color: dialogBoxColor,
            borderRadius: BorderRadius.circular(28),
            border: Border.all(color: Color(0x33FFFFFF), width: 1),
          ),
          child: Stack(
            children: [
              Positioned.fill(
                child: Container(
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(28),
                    boxShadow: [
                      BoxShadow(
                        color: Color(0x14000000),
                        blurRadius: 5,
                        spreadRadius: -5,
                      ),
                    ],
                  ),
                ),
              ),
              Positioned.fill(
                child: Align(
                  alignment: Alignment.bottomCenter,
                  child: Container(
                    height: 80,
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.topCenter,
                        end: Alignment.bottomCenter,
                        colors: [Color(0x00000000), Color(0x2E000000)],
                        stops: [0.0, 1.0],
                      ),
                    ),
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(24.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    SizedBox(height: 20),
                    TypingText(
                      message.text,
                      key: ValueKey(message.id),
                      style: TextStyle(
                        fontSize: 18,
                        fontFamily: 'NotoSansJP',
                        color: Color(0xFF1B1B1B),
                        height: 1.2,
                        fontWeight: FontWeight.w400,
                        shadows: [Shadow(color: Color(0x26000000), blurRadius: 2.0, offset: Offset(1.0, 1.0))],
                      ),
                    ),
                    SizedBox(height: 16),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        if (!message.isUser && message.audioPath != null)
                          Container(
                            margin: EdgeInsets.only(right: 16),
                            width: 36,
                            height: 36,
                            decoration: BoxDecoration(
                              color: Colors.white.withOpacity(0.72),
                              shape: BoxShape.circle,
                              boxShadow: [BoxShadow(color: Colors.black.withOpacity(0.1), blurRadius: 4, offset: Offset(0, 2))],
                            ),
                            child: IconButton(
                              padding: EdgeInsets.zero,
                              icon: Icon(_isPlayingVoice ? Icons.pause : Icons.volume_up, color: Color(0xFF1B1B1B), size: 20),
                              onPressed: () => _playVoice(message.audioPath!),
                            ),
                          ),
                        AnimatedBuilder(
                          animation: _nextIndicatorController,
                          builder: (context, child) {
                            return Transform.scale(
                              scale: _nextIndicatorAnimation.value,
                              child: Icon(
                                Icons.play_arrow,
                                color: message.isUser ? secondaryColor : primaryColor,
                                size: 24,
                              ),
                            );
                          },
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTitleBar() {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
      decoration: BoxDecoration(
        color: Colors.black.withOpacity(0.2),
        borderRadius: BorderRadius.circular(24),
        border: Border.all(
          color: Colors.white.withOpacity(0.1),
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 20,
            offset: Offset(0, 10),
          ),
        ],
      ),
      child: Row(
        children: [
          Expanded(
            child: Text(
              "涼宮ハルヒとの会話",
              style: TextStyle(
                fontSize: 20,
                fontFamily: 'NotoSansJP',
                fontWeight: FontWeight.w600,
                color: Colors.white,
                letterSpacing: 0.5,
              ),
            ),
          ),
          if (_isAutoMode)
            Container(
              margin: EdgeInsets.only(right: 16),
              padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
              decoration: BoxDecoration(
                color: primaryColor.withOpacity(0.8),
                borderRadius: BorderRadius.circular(16),
              ),
              child: Text(
                "AUTO",
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 12,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ),
          IconButton(
            onPressed: () => setState(() => _showSettings = true),
            icon: Icon(Icons.settings, color: Colors.white.withOpacity(0.4), size: 24),
            padding: EdgeInsets.all(8),
          ),
          PopupMenuButton<String>(
            icon: Icon(Icons.more_vert, color: Colors.white.withOpacity(0.4), size: 24),
            onSelected: (value) {
              switch (value) {
                case 'auto':
                  setState(() => _isAutoMode = !_isAutoMode);
                  break;
                case 'skip':
                  break;
                case 'backlog':
                  setState(() => _showBacklog = true);
                  break;
              }
            },
            itemBuilder: (context) => [
              PopupMenuItem(
                value: 'auto',
                child: Row(
                  children: [
                    Icon(_isAutoMode ? Icons.pause : Icons.play_arrow, color: primaryColor),
                    SizedBox(width: 12),
                    Text(_isAutoMode ? '停止' : '自動'),
                  ],
                ),
              ),
              PopupMenuItem(
                value: 'skip',
                child: Row(
                  children: [
                    Icon(Icons.fast_forward, color: secondaryColor),
                    SizedBox(width: 12),
                    Text('スキップ'),
                  ],
                ),
              ),
              PopupMenuItem(
                value: 'backlog',
                child: Row(
                  children: [
                    Icon(Icons.history, color: Colors.grey[600]),
                    SizedBox(width: 12),
                    Text('履歴'),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildStylizedInputArea() {
    return Positioned(
      bottom: MediaQuery.of(context).padding.bottom + 16,
      left: 24,
      right: 24,
      child: Material(
        color: Colors.transparent,
        child: ClipRRect(
          borderRadius: BorderRadius.circular(28),
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 14, sigmaY: 14),
            child: Container(
              padding: EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.85),
                borderRadius: BorderRadius.circular(28),
                border: Border.all(color: Color(0x33FFFFFF), width: 1),
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Container(
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.5),
                      borderRadius: BorderRadius.circular(30),
                    ),
                    child: TextField(
                      controller: _textController,
                      autofocus: true,
                      style: TextStyle(
                        color: Color(0xFF1B1B1B),
                        fontSize: 16,
                        fontFamily: 'NotoSansJP',
                      ),
                      decoration: InputDecoration(
                        hintText: "メッセージを入力...",
                        hintStyle: TextStyle(color: Color(0xFF555555)),
                        border: InputBorder.none,
                        contentPadding: EdgeInsets.symmetric(horizontal: 20, vertical: 14),
                      ),
                      onSubmitted: (_) => _sendMessage(),
                      maxLines: 1,
                      textInputAction: TextInputAction.send,
                    ),
                  ),
                  SizedBox(height: 20),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      TextButton(
                        onPressed: () => setState(() => _showInputArea = false),
                        child: Text(
                          "キャンセル",
                          style: TextStyle(color: Color(0xFF333333)),
                        ),
                      ),
                      SizedBox(width: 12),
                      GestureDetector(
                        onTap: _sendMessage,
                        child: Container(
                          padding: EdgeInsets.symmetric(horizontal: 28, vertical: 12),
                          decoration: BoxDecoration(
                            color: primaryColor,
                            borderRadius: BorderRadius.circular(30),
                            boxShadow: [
                              BoxShadow(
                                color: primaryColor.withOpacity(0.4),
                                blurRadius: 10,
                                offset: Offset(0, 4),
                              ),
                            ],
                          ),
                          child: Text(
                            "送信",
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                              fontFamily: 'NotoSansJP',
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildBacklogOverlay() {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
          colors: [
            Colors.black.withOpacity(0.9),
            Colors.black.withOpacity(0.7),
          ],
        ),
      ),
      child: SafeArea(
        child: Column(
          children: [
            Container(
              padding: EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.1),
                borderRadius: BorderRadius.only(
                  bottomLeft: Radius.circular(24),
                  bottomRight: Radius.circular(24),
                ),
                border: Border.all(
                  color: Colors.white.withOpacity(0.1),
                  width: 1,
                ),
              ),
              child: Row(
                children: [
                  Icon(
                    Icons.history,
                    color: primaryColor,
                    size: 28,
                  ),
                  SizedBox(width: 12),
                  Text(
                    "会話履歴",
                    style: TextStyle(
                      fontSize: 24,
                      fontFamily: 'NotoSansJP',
                      fontWeight: FontWeight.w600,
                      color: Colors.white,
                    ),
                  ),
                  Spacer(),
                  IconButton(
                    onPressed: () => setState(() => _showBacklog = false),
                    icon: Icon(Icons.close, color: Colors.white, size: 28),
                  ),
                ],
              ),
            ),
            
            Expanded(
              child: ListView.builder(
                padding: EdgeInsets.symmetric(horizontal: 20, vertical: 16),
                itemCount: _messages.length,
                itemBuilder: (context, index) {
                  final message = _messages[index];
                  return Container(
                    margin: EdgeInsets.only(bottom: 16),
                    padding: EdgeInsets.all(20),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.08),
                      borderRadius: BorderRadius.circular(20),
                      border: Border.all(
                        color: Colors.white.withOpacity(0.15),
                        width: 1,
                      ),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.1),
                          blurRadius: 8,
                          offset: Offset(0, 4),
                        ),
                      ],
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Container(
                          padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                          decoration: BoxDecoration(
                            color: message.isUser 
                                ? secondaryColor.withOpacity(0.2)
                                : primaryColor.withOpacity(0.2),
                            borderRadius: BorderRadius.circular(12),
                            border: Border.all(
                              color: message.isUser ? secondaryColor : primaryColor,
                              width: 1,
                            ),
                          ),
                          child: Text(
                            message.speaker,
                            style: TextStyle(
                              color: message.isUser ? secondaryColor : primaryColor,
                              fontSize: 14,
                              fontWeight: FontWeight.w600,
                              fontFamily: 'NotoSansJP',
                            ),
                          ),
                        ),
                        SizedBox(height: 12),
                        Text(
                          message.text,
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 16,
                            height: 1.4,
                            fontFamily: 'NotoSansJP',
                          ),
                        ),
                        SizedBox(height: 8),
                        Text(
                          "${message.timestamp.hour.toString().padLeft(2, '0')}:${message.timestamp.minute.toString().padLeft(2, '0')}",
                          style: TextStyle(
                            color: Colors.white.withOpacity(0.5),
                            fontSize: 12,
                            fontFamily: 'NotoSansJP',
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSettingsOverlay() {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
          colors: [
            Colors.black.withOpacity(0.9),
            Colors.black.withOpacity(0.7),
          ],
        ),
      ),
      child: SafeArea(
        child: Center(
          child: Container(
            margin: EdgeInsets.all(40),
            padding: EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.95),
              borderRadius: BorderRadius.circular(24),
              border: Border.all(
                color: Colors.white.withOpacity(0.2),
                width: 1,
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.3),
                  blurRadius: 30,
                  offset: Offset(0, 15),
                ),
              ],
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(
                      Icons.settings,
                      color: primaryColor,
                      size: 28,
                    ),
                    SizedBox(width: 12),
                    Text(
                      "設定",
                      style: TextStyle(
                        fontSize: 24,
                        fontFamily: 'NotoSansJP',
                        fontWeight: FontWeight.w600,
                        color: Colors.black87,
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 24),
                _buildSliderSetting(
                  "音声速度",
                  Icons.speed,
                  0.5,
                  2.0,
                  1.0,
                  (value) {},
                ),
                SizedBox(height: 16),
                _buildSliderSetting(
                  "音声ピッチ",
                  Icons.tune,
                  -12.0,
                  12.0,
                  0.0,
                  (value) {},
                ),
                SizedBox(height: 16),
                _buildSliderSetting(
                  "音量",
                  Icons.volume_up,
                  0.0,
                  1.0,
                  0.8,
                  (value) {},
                ),
                SizedBox(height: 24),
                Container(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: () => setState(() => _showSettings = false),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: primaryColor,
                      foregroundColor: Colors.white,
                      padding: EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(16),
                      ),
                      elevation: 4,
                      shadowColor: primaryColor.withOpacity(0.3),
                    ),
                    child: Text(
                      "閉じる",
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        fontFamily: 'NotoSansJP',
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildSliderSetting(String label, IconData icon, double min, double max, double initialValue, ValueChanged<double> onChanged) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Container(
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: primaryColor.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Icon(icon, color: primaryColor, size: 20),
            ),
            SizedBox(width: 12),
            Text(
              label,
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w600,
                fontFamily: 'NotoSansJP',
                color: Colors.black87,
              ),
            ),
          ],
        ),
        SizedBox(height: 12),
        Container(
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          decoration: BoxDecoration(
            color: Colors.grey[50],
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: Colors.grey[200]!,
              width: 1,
            ),
          ),
          child: SliderTheme(
            data: SliderTheme.of(context).copyWith(
              activeTrackColor: primaryColor,
              inactiveTrackColor: Colors.grey[300],
              thumbColor: primaryColor,
              overlayColor: primaryColor.withOpacity(0.2),
              trackHeight: 4,
              thumbShape: RoundSliderThumbShape(enabledThumbRadius: 8),
            ),
            child: Slider(
              value: initialValue,
              min: min,
              max: max,
              onChanged: onChanged,
            ),
          ),
        ),
        SizedBox(height: 4),
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              min.toStringAsFixed(1),
              style: TextStyle(
                fontSize: 12,
                color: Colors.grey[600],
                fontFamily: 'NotoSansJP',
              ),
            ),
            Text(
              max.toStringAsFixed(1),
              style: TextStyle(
                fontSize: 12,
                color: Colors.grey[600],
                fontFamily: 'NotoSansJP',
              ),
            ),
          ],
        ),
      ],
    );
  }
}
